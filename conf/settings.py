"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 3.0.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys

from conf import env, props
from conf.env import BASE_DIR

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.SECRET_KEY
SECRET_KEY_FALLBACKS = env.SECRET_KEY_FALLBACKS

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.DEBUG

ALLOWED_HOSTS = env.ALLOWED_HOSTS

# Sentry: Error tracking that helps
# developers monitor and fix crashes in real time.
# https://sentry.io/welcome/

USE_SENTRY = env.USE_SENTRY
SENTRY_DSN = env.SENTRY_DSN
SENTRY_DEBUG = env.SENTRY_DEBUG
SENTRY_RELEASE = env.SENTRY_RELEASE
SENTRY_ENVIRONMENT = env.SENTRY_ENVIRONMENT
SENTRY_SERVER_NAME = env.SENTRY_SERVER_NAME

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Vendors
    "django_filters",
    # "storages",
    # Apps
    "apps.accounts",
    "apps.common",
    "apps.cors",
]

if env.USE_DRF:
    INSTALLED_APPS.append("rest_framework")

if env.USE_GRAPHQL:
    INSTALLED_APPS.append("apps.gql")
    INSTALLED_APPS.append("graphene_django")

if env.USE_CHANNELS:
    INSTALLED_APPS.append("channels")

if env.USE_SENTRY:
    import sentry_sdk
    from sentry_sdk.integrations.celery import CeleryIntegration
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        integrations=[
            CeleryIntegration(),
            DjangoIntegration(),
        ],
        debug=SENTRY_DEBUG,
        release=SENTRY_RELEASE,
        environment=SENTRY_ENVIRONMENT,
        server_name=SENTRY_SERVER_NAME,
        traces_sample_rate=1.0,
    )

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    # Vendors
    # Apps
    "apps.cors.middleware.CorsMiddleware",
    "apps.common.middleware.RequestIDMiddleware",
    "apps.common.middleware.TimeZoneMiddleware",
    "apps.common.middleware.LocaleMiddleware",
]

# Logging
# https://docs.djangoproject.com/en/3.0/ref/settings/#logging

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        "sql.console": {
            "()": "django.utils.log.ServerFormatter",
            "format": "{message}",
            "style": "{",
        },
    },
    "handlers": {
        "sql.console": {
            "level": "DEBUG",
            "filters": ["require_debug_true"],
            "class": "logging.StreamHandler",
            "formatter": "sql.console",
        },
    },
    "loggers": {
        "sql.console": {
            "handlers": ["sql.console"],
            "level": "DEBUG",
            "propagate": False,
        },
    },
}

if env.SQL_DEBUG:
    MIDDLEWARE.append("apps.common.middleware.SQLDebugMiddleware")

CORS_ORIGIN_ALLOW_ALL = env.CORS_ORIGIN_ALLOW_ALL
CORS_ORIGIN_WHITELIST = env.CORS_ORIGIN_WHITELIST
CORS_ALLOW_METHODS = env.CORS_ALLOW_METHODS
CORS_ALLOW_HEADERS = env.CORS_ALLOW_HEADERS
CORS_EXPOSE_HEADERS = env.CORS_EXPOSE_HEADERS

# Django REST framework: Powerful and flexible toolkit for building Web APIs.
# http://www.django-rest-framework.org/#api-guide

USE_DRF = env.USE_DRF
DRF_SWAGGER = env.DRF_SWAGGER

REST_FRAMEWORK = {
    "DEFAULT_METADATA_CLASS": "rest_framework.metadata.SimpleMetadata",
    # "DEFAULT_THROTTLE_CLASSES": (
    #     "rest_framework.throttling.AnonRateThrottle",
    #     "rest_framework.throttling.UserRateThrottle",
    # ),
    # "DEFAULT_THROTTLE_RATES": {
    #     "anon": "100/day",
    #     "user": "1000/day"
    # },
    "DEFAULT_PARSER_CLASSES": ("rest_framework.parsers.JSONParser",),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": (),
    "DEFAULT_PERMISSION_CLASSES": (),
    "DEFAULT_PAGINATION_CLASS": "apis.pi.pagination.CursorPagination",
    # "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFAULT_FILTER_BACKENDS": (
        "django_filters.rest_framework.DjangoFilterBackend",
        #     "rest_framework.filters.OrderingFilter",
        #     "rest_framework.filters.SearchFilter",
    ),
    # "ORDERING_PARAM": "sort",
    # "SEARCH_PARAM": "search",
    "EXCEPTION_HANDLER": "apis.pi.exception_handler",
}

# Django channels framework: Project that takes Django
# and extends its abilities beyond HTTP - to handle WebSockets,
# chat protocols, IoT protocols, and more.
# https://channels.readthedocs.io/en/latest/

USE_CHANNELS = env.USE_CHANNELS
ASGI_APPLICATION = env.ASGI_APPLICATION
CHANNEL_LAYERS = env.CHANNEL_LAYERS

ROOT_URLCONF = env.ROOT_URLCONF

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.template.context_processors.media",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = env.WSGI_APPLICATION

# Cache
# https://docs.djangoproject.com/en/3.0/ref/settings/#caches

CACHES = env.CACHES

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = env.DATABASES

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "accounts.User"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",  # noqa
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",  # noqa
    },
]

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher",
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.BCryptSHA256PasswordHasher",
    "django.contrib.auth.hashers.BCryptPasswordHasher",
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = env.LANGUAGE_CODE
LOCALE_PATHS = env.LOCALE_PATHS
TIME_ZONE = env.TIME_ZONE
USE_I18N = env.USE_I18N
USE_L10N = env.USE_L10N
USE_TZ = env.USE_TZ

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

USE_STATIC = env.USE_STATIC
STATICFILES_STORAGE = env.STATICFILES_STORAGE
STATICFILES_DIRS = env.STATICFILES_DIRS
STATIC_URL = env.STATIC_URL
STATIC_ROOT = env.STATIC_ROOT

# Media files
# https://docs.djangoproject.com/en/3.0/ref/settings/#media-root

USE_MEDIA = env.USE_MEDIA
DEFAULT_FILE_STORAGE = env.DEFAULT_FILE_STORAGE
MEDIA_URL = env.MEDIA_URL
MEDIA_ROOT = env.MEDIA_ROOT

# Django storages: Support for many storage backends in Django.
# https://django-storages.readthedocs.io/en/latest/

DROPBOX_OAUTH2_TOKEN = env.DROPBOX_OAUTH2_TOKEN
DROPBOX_ROOT_PATH = env.DROPBOX_ROOT_PATH

AWS_ACCESS_KEY_ID = env.AWS_ACCESS_KEY_ID
AWS_SECRET_ACCESS_KEY = env.AWS_SECRET_ACCESS_KEY
AWS_STORAGE_BUCKET_NAME = env.AWS_STORAGE_BUCKET_NAME
AWS_LOCATION = env.AWS_LOCATION

GS_FILE_OVERWRITE = env.GS_FILE_OVERWRITE
GS_BUCKET_NAME = env.GS_BUCKET_NAME
GS_LOCATION = env.GS_LOCATION
GS_DEFAULT_ACL = env.GS_DEFAULT_ACL

# https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-DATA_UPLOAD_MAX_MEMORY_SIZE
# https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-FILE_UPLOAD_MAX_MEMORY_SIZE

DATA_UPLOAD_MAX_MEMORY_SIZE = env.DATA_UPLOAD_MAX_MEMORY_SIZE
FILE_UPLOAD_MAX_MEMORY_SIZE = env.FILE_UPLOAD_MAX_MEMORY_SIZE

# Session engine
# https://docs.djangoproject.com/en/3.0/ref/settings/#std:setting-SESSION_ENGINE
SESSION_ENGINE = env.SESSION_ENGINE

# Mail
# https://docs.djangoproject.com/en/3.0/ref/settings/#email-backend

EMAIL_BACKEND = env.EMAIL_BACKEND
EMAIL_HOST = env.EMAIL_HOST
EMAIL_PORT = env.EMAIL_PORT
EMAIL_USE_TLS = env.EMAIL_USE_TLS
EMAIL_HOST_USER = env.EMAIL_HOST_USER
EMAIL_HOST_PASSWORD = env.EMAIL_HOST_PASSWORD
EMAIL_FILE_PATH = env.EMAIL_FILE_PATH
DEFAULT_FROM_EMAIL = env.DEFAULT_FROM_EMAIL

props.set_mail_props(sys.modules[__name__], backends=env.EMAIL_BACKENDS)

# Graphene
# https://docs.graphene-python.org/en/latest/

USE_GRAPHQL = env.USE_GRAPHQL
GRAPHENE = env.GRAPHENE
GRAPHIQL = env.GRAPHIQL

# Celery: Distributed task queue. Celery is an
# asynchronous task queue/job queue based on distributed message passing.
# http://docs.celeryproject.org/en/latest/userguide/configuration.html

CELERY_BROKER_URL = env.CELERY_BROKER_URL
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_RESULT_BACKEND = None

CELERY_BEAT_SCHEDULE = env.CELERY_BEAT_SCHEDULE
CELERY_BEAT_SCHEDULER = "celery.beat:PersistentScheduler"
CELERY_BEAT_SCHEDULE_FILENAME = os.path.join(BASE_DIR, "schedule.db")

CELERY_TASK_QUEUES = env.CELERY_TASK_QUEUES
CELERY_TASK_ROUTES = env.CELERY_TASK_ROUTES

CELERY_TASK_DEFAULT_QUEUE = "app.default"
CELERY_TASK_DEFAULT_EXCHANGE = "app.default"
CELERY_TASK_DEFAULT_EXCHANGE_TYPE = "topic"
CELERY_TASK_DEFAULT_ROUTING_KEY = "app.default.#"
CELERY_TASK_IGNORE_RESULT = True

CELERY_ENABLE_UTC = env.USE_TZ
CELERY_TIMEZONE = env.TIME_ZONE

# Admin site

USE_ADMIN_SITE = env.USE_ADMIN_SITE

# Extra

AUTH_TOKEN_TYPE = env.AUTH_TOKEN_TYPE
AUTH_TOKEN_AGE = env.AUTH_TOKEN_AGE
AUTH_REFRESH_TOKEN_TYPE = env.AUTH_REFRESH_TOKEN_TYPE
AUTH_REFRESH_TOKEN_AGE = env.AUTH_REFRESH_TOKEN_AGE
SIGNUP_TOKEN_TYPE = env.SIGNUP_TOKEN_TYPE
SIGNUP_TOKEN_AGE = env.SIGNUP_TOKEN_AGE
SIGNUP_URL = env.SIGNUP_URL
PASSWD_TOKEN_TYPE = env.PASSWD_TOKEN_TYPE
PASSWD_TOKEN_AGE = env.PASSWD_TOKEN_AGE
PASSWD_URL = env.PASSWD_URL

USE_DUMMY = env.USE_DUMMY

# CSRF
# https://docs.djangoproject.com/en/3.2/ref/settings/#std:setting-CSRF_TRUSTED_ORIGINS

CSRF_TRUSTED_ORIGINS = env.CSRF_TRUSTED_ORIGINS

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto>

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
